# Example configuration file for Services.  After making the appropriate
# changes to this file, place it in the Services data directory (as
# specified in the "configure" script, default /usr/local/lib/services)
# under the name "services.conf".
#
# The format of this file is fairly simple: a line beginning with a # is a
# comment, and any other non-blank line is expected to be a directive and
# parameters, separated by spaces or tabs.  For example:
#
#	Directive Parameter-1 Parameter-2 ...
#
# Directives are case-insensitive.  Note that some directives do not take
# any parameters; these are typically "on-off" directives, for which simply
# including the directive in this file (or removing it) has an effect on
# Services' functionality.
#
# If a parameter's value is a string which includes spaces, enclose the
# string in double quotation marks, like the example below.  Quotes may be
# used around any string at all for clarity.
#
#	"This is a parameter string with spaces in it"
#
# If you need to include a double quote inside a quoted string, precede it
# by a backslash:
#
#	"This string has \"double quotes\" in it"
#
# Time parameters can be specified either as an integer representing a
# number of seconds (e.g. "3600" = 1 hour), or as an integer with a unit
# specifier: "s" = seconds, "m" = minutes, "h" = hours, "d" = days.
# Combinations (such as "1h30m") are also permitted.  Examples (all of which
# represent the same length of time, one day):
#
#	"86400", "86400s", "1440m", "24h", "1d", "23h60m", "23h59m60s"
#
# In the documentation for each directive, one of the following will be
# included to indicate whether an option is required:
#
# [REQUIRED]
#     Indicates a directive which must be given.  Without it, Services will
#     not start.
#
# [RECOMMENDED]
#     Indicates a directive which may be omitted, but omitting it may cause
#     undesirable side effects.
#
# [OPTIONAL]
#     Indicates a directive which is optional.  If not given, the feature
#     will typically be disabled.  If this is not the case, more
#     information will be given in the documentation.
#
# [DISCOURAGED]
#     Indicates a directive which may cause undesirable side effects if
#     specified.
#
# [DEPRECATED]
#     Indicates a directive which will disappear in a future version of
#     Services, usually because its functionality has been either
#     superseded by that of other directives or incorporated into the main
#     program.

###########################################################################
#
# Remote server configuration
#
###########################################################################

# RemoteServer <hostname> <port> <password>  [REQUIRED]
#     Specifies the remote server hostname and port.  The hostname may
#     either be a standard Internet hostname or dotted-quad numeric
#     address; the port number must be an integer between 1 and 65535
#     inclusive.  The password is a string which should be enclosed in
#     double quotes if it contains any spaces (or just for clarity).
#
#     The remote server and port may be overridden at runtime with the
#     -remote command-line option.  The password may not be set at runtime.

RemoteServer	localhost 6667 "mypass"

# LocalAddress <hostname> [port]  [OPTIONAL]
#     Specifies the local address to bind to before connecting to the
#     remote server.  This may be useful on multihomed hosts.  The hostname
#     and port number are specified the same way as with the RemoteServer
#     directive.  If this is not specified, Services will let the operating
#     system choose the local address.  If only a hostname is specified,
#     Services will bind to that address but let the operating system
#     choose the local port number.
#
#     If you don't know what this means or don't need to use it, just leave
#     the directive commented out.
#
#     This directive may be overridden at runtime by the -local
#     command-line option.

#LocalAddress	nowhere. 0

###########################################################################
#
# Services identification and pseudoclient names
#
###########################################################################

# ServerName <name>  [REQUIRED]
#     Specifies the IRC server name which Services should use.  May be
#     overridden by the -name command-line option.

ServerName	"services.localhost.net"

# ServerDesc <text>  [REQUIRED]
#     Specifies the text which should appear as the server's information in
#     /whois and similar queries.  May be overridden by the -desc
#     command-line option.

ServerDesc	"Services for IRC Networks"

# ServerNumeric <numeric>  [RECOMMENDED; UnrealIRCd only]
#     Makes Services send a numeric to the remote server on connect.  This
#     must be a value between 1 and 254, and must not be in use by any
#     other IRC server on the network.  If you do not want to use a numeric
#     for Services, comment the directive out.  May be overridden by the
#     -numeric command-line option.
#
#     If you are not using the Unreal IRCd, this directive will be ignored.

ServerNumeric	1

# ServiceUser <usermask>  [REQUIRED]
#     Specifies the user@host mask which should be used by the Services
#     pseudoclients.  May be overridden by the -user and -host command-line
#     options.

ServiceUser	"services@localhost.net"

# ...Name <nick> <string>  [REQUIRED except as noted below]
#     Specify the nicknames (first parameter) and "real" names (second
#     parameter) for the Services pseudoclients.  IrcIIHelp and DevNull may
#     be disabled by commenting out the appropriate lines below.

NickServName	"NickServ"	"Nickname Server"
ChanServName	"ChanServ"	"Channel Server"
MemoServName	"MemoServ"	"Memo Server"
HelpServName	"HelpServ"	"Help Server"
OperServName	"OperServ"	"Operator Server"
StatServName	"StatServ"	"Statistics Server"
GlobalName	"Global"	"Global Noticer"
IrcIIHelpName	"IrcIIHelp"	"ircII Help Server"
DevNullName	"DevNull"	"/dev/null -- message sink"

###########################################################################
#
# Services data filenames
#
###########################################################################

# NOTE: All filenames are relative to the Services data directory.

# PIDFile <filename>  [REQUIRED]
#     Specifies the name of the file containing Services' process ID.

PIDFile		services.pid

# MOTDFile <filename>  [REQUIRED]
#     Specifies the name of the Message of the Day file.

MOTDFile	services.motd

# HelpDir <dirname>  [REQUIRED]
#     Specifies the name of the subdirectory containing help files for
#     HelpServ.

HelpDir		helpfiles

# ...DB <filename>  [REQUIRED]
#     Specifies the filenames for the various Services subsystems' databases.

NickServDB	nick.db
ChanServDB	chan.db
OperServDB	oper.db
AutokillDB	akill.db
NewsDB		news.db
ExceptionDB	exception.db
StatServDB	stats.db

###########################################################################
#
# Basic functionality
#
###########################################################################

# NoBackupOkay  [DISCOURAGED]
#     Allows Services to continue file write operations (i.e. database
#     saving) even if the original file cannot be backed up.  Enabling this
#     option may allow Services to continue operation under some conditions
#     when it might otherwise fail, such as a nearly-full disk.
#
#     *** WARNING ***
#     Enabling this option can cause irrecoverable data loss under some
#     conditions, so make CERTAIN you know what you're doing when you
#     enable it!

#NoBackupOkay

# NoBouncyModes  [OPTIONAL]
#     Normally, Services will check for the remote IRC server reversing its
#     mode changes, and issue a warning (and stop changing modes) if it
#     detects such a problem.  However, the detection will sometimes
#     trigger even when there is no problem, thus preventing channel
#     mode-locks and other features from working.  If you specify this
#     directive, Services will not check for mode bouncing, which can avoid
#     this problem if you know your servers are set up correctly.
#
#     WARNING: setting this option when your servers are incorrectly
#     configured can result in flooding!

#NoBouncyModes

# NoSplitRecovery [OPTIONAL]
#     Disables Services' recognition of users returning from netsplits.
#     Normally (on networks with some sort of timestamp support in the IRC
#     server), Services will check via the timestamp field whether a user
#     is the same as the last user who identified for the nick, and allow
#     the user access to that nick without requiring identification again
#     if the timestamps match.  Enabling this directive will force all
#     users to re-identify after a netsplit.
#
#     Normally, it's easier on users to leave this disabled, but if you
#     suspect one of your servers has been hacked to send false timestamps
#     (or you suspect a bug in Services itself) enabling this directive
#     will eliminate the possibility of one user "stealing" another's nick
#     by pretending to have the same timestamp.
#
#     You may also want to uncomment this directive if your servers' clocks
#     are very far apart; the less synchronized the servers' clocks are,
#     the greater the possibility of someone "taking over" another person's
#     nick when a server with a fast clock splits.
#
#     NOTE: On DALnet 4.4.15+, Dreamforge, Bahamut and compatible networks,
#     Services takes advantage of an IRC server feature to assign each user
#     a permanent ID number, which enhances the security of this check; on
#     such networks, you should almost always leave this directive
#     commented out.

#NoSplitRecovery

# StrictPasswords  [RECOMMENDED]
#     When enabled, causes Services to perform more stringent checks on
#     passwords.  If this is disabled, Services will only disallow a
#     password if it is the same as the entity (nickname or channel name)
#     with which it is associated.  When enabled, however, Services will
#     also check that the password is at least five characters long, and
#     in the future will probably check other things as well.

StrictPasswords

# BadPassLimit <count>  [RECOMMENDED]
#     Sets the number of invalid password tries before Services removes a
#     user from the network.  If a user enters <count> invalid passwords
#     for any Services function or combination of functions during a
#     single IRC session (subect to BadPassTimeout, below), Services will
#     issue a /KILL for the user.  If not given, Services will ignore
#     failed password attempts (though they will be logged in any case).

BadPassLimit	5

# BadPassTimeout <time>  [OPTIONAL]
#     Sets the time after which invalid passwords are forgotten about.  If
#     a user does not enter any incorrect passwords in this amount of time,
#     the incorrect password count will reset to zero.  If not given, the
#     timeout will be disabled, and the incorrect password count will never
#     be reset until the user disconnects.

BadPassTimeout	1h

# BadPassWarning <count>  [RECOMMENDED]
#     Sets the number of bad passwords _for a single nick or channel_ that
#     will be accepted before a warning is sent using WALLOPS/GLOBOPS.  If
#     not given, no warnings will be sent.

BadPassWarning	5

# BadPassSuspend <count>  [OPTIONAL]
#     Sets the number of bad passwords _for a single nick or channel_ that
#     will be accepted before the nick/channel is automatically suspended.
#     If not given, nicks and channels will not be automatically suspended
#     for bad passwords.

BadPassSuspend	10

# UpdateTimeout <time>  [REQUIRED]
#     Sets the delay between automatic database updates.  This timer is
#     reset by the OperServ UPDATE command.

UpdateTimeout	5m

# ExpireTimeout <time>  [REQUIRED]
#     Sets the delay between checks for expired nicknames and channels.
#     The OperServ UPDATE command will also cause a check for expiration
#     and reset this timer.

ExpireTimeout	30m

# ReadTimeout <time>  [REQUIRED]
#     Sets the timeout period for reading from the network.

ReadTimeout	5s

# WarningTimeout <time>  [REQUIRED]
#     Sets the interval between sending warning messages for program
#     errors via WALLOPS/GLOBOPS.

WarningTimeout	4h

# TimeoutCheck <seconds>  [REQUIRED]
#     Sets the (maximum) frequency at which the timeout list is checked.
#     This, combined with ReadTimeout above, determine how accurately timed
#     events, such as nick kills, occur; it also determines how much CPU
#     time Services will use doing this.  Higher values will cause less
#     accurate timing but less CPU usage.  Note that the parameter is a
#     number of seconds, not a "time", and may include a fractional part.
#
#     This shouldn't be set any higher than 10 seconds, and 1 second or
#     less is best if your system is powerful enough (or your network small
#     enough) to handle it.  0 will cause the timeout list to be checked
#     every time through the main loop, which will probably slow down
#     Services too much to be useful on most networks.
#
#     Note that this value is not an absolute limit on the period between
#     checks of the timeout list; the period may be as great as ReadTimeout
#     (above) during periods of inactivity.

TimeoutCheck	1.5

# PingFrequency <time>  [OPTIONAL]
#     Sets the time after which Services sends a PING message to its uplink
#     if no other network activity has occurred.  This can be useful if you
#     have a low-activity network and your server keeps dropping Services'
#     connection with "Ping timeout".  If not set, Services will not send
#     PING messages.

#PingFrequency	30s

# MergeChannelModes <seconds>  [OPTIONAL]
#     WARNING:  This directive can have security implications; read
#     carefully before enabling.
#
#     If this directive is given, it causes Services to not send out
#     channel mode changes immediately, but to wait for the given number of
#     seconds (which may be fractional) and collect all channel modes to
#     send in a single command.  For example, if two users enter a channel
#     at nearly the same time and both of them are to be opped, instead of
#     sending two MODE +o commands, Services will send a single MODE +oo
#     command.  This option can help with large channels in reducing mode
#     floods, particularly when Services first connects or a server
#     reconnects after a split; however, the sending of the mode command
#     will be slightly delayed, so that the users will have to wait a short
#     time before getting chanop privileges.  Furthermore, since this
#     increases the time before deops, etc. occur, users can take advantage
#     of netsplits to "steal ops" for a short time before Services responds.
#
#     Services will never send out more than six parameters with each MODE
#     command (this limit is specified in the RFC).  If more than six +o,
#     +v, etc. modes are to be sent, Services will send them out six at a
#     time without waiting for the timeout given with this directive.  Also,
#     if more than MERGE_CHANMODE_SLOTS (defined in config.h; default 3)
#     channels receive modes before the timeout expires, those modes will
#     similarly be sent out at that time.
#
#     Note that the actual sending of the MODE command may be delayed by as
#     much as the TimeoutCheck value; if you use this option, then in
#     general you should set TimeoutCheck to the same (or a smaller) value.
#     Also, on networks with little traffic there may be an additional
#     delay up to the value of ReadTimeout before the modes are sent.

#MergeChannelModes 0.5

###########################################################################
#
# NickServ configuration
#
###########################################################################

# NSDef...  [OPTIONAL]
#     Sets the default options for newly registered nicks.  Note that
#     changing these options will have no effect on nicks which are already
#     registered.
#
#     If both NSDefKill and NSDefKillQuick are given, the latter takes
#     precedence.  KILL IMMED cannot be specified as a default.
#
#     NOTE:  If you do not enable any of these options, a default of
#     Secure, MemoSignon, and MemoReceive will be used, for backward
#     compatibility.  If you really want no options enabled by default, use
#     NSDefNone.

#NSDefNone

#NSDefKill
#NSDefKillQuick
NSDefSecure
#NSDefPrivate
#NSDefHideEmail
#NSDefHideUsermask
#NSDefHideQuit
NSDefMemoSignon
NSDefMemoReceive

# NSRegDelay <time>  [RECOMMENDED]
#     Sets the minimum length of time between consecutive uses of the
#     REGISTER command.  If not given, this restriction is disabled (note
#     that this allows "registration flooding").

NSRegDelay	30s

# NSRequireEmail  [OPTIONAL]
#     Makes an E-mail address required at registration time.  Users also
#     will not be able to clear the address once registered, though they
#     can change it.  If not set, an E-mail address is not required (but
#     may still be given), and the address may be cleared later on.

#NSRequireEmail

# NSExpire <time>  [RECOMMENDED]
#     Sets the length of time before a nick registration expires.  If not
#     set, nicknames will not expire.

NSExpire	30d

# NSExpireWarning <time>  [OPTIONAL]
#     Sets the length of time before nick expiration during which warnings
#     are sent to the user when the user is online (and not identified).
#     If not set, no warnings will be sent; however, a message will still
#     be sent when the nickname actually expires.

NSExpireWarning	3d

# NSSuspendExpire <time> <grace-period>  [RECOMMENDED]
#     Sets the default expiry time and recovery grace period for nickname
#     suspensions.  (The expiry time can be set individually for each
#     suspension; the grace period cannot.)
#     The recovery grace period is the length of time a nick must exist
#     for, after being unsuspended, before it is allowed to expire.  This
#     gives the owner a chance to reclaim the nick. It is enforced, if
#     necessary, by adjusting the "last seen time" value when the nick is
#     unsuspended. If set to zero, nicknames that are suspended for longer
#     than "NSExpire" will be expired (dropped) during the next check for
#     nickname expiration, giving the owners very little time to identify
#     for their nicknames and prevent their expiry.
#
#     If not specified, nickname suspensions will not expire by default,
#     and there will be no grace period for recovering the nick.

NSSuspendExpire 25d 5d

# NSAccessMax <count>  [REQUIRED]
#     Sets the maximum number of entries allowed on a nickname access list.

NSAccessMax	32

# NSEnforcerUser <user>[@<host>]  [REQUIRED]
#     Sets the username (and possibly hostname) used for the fake user
#     created when NickServ collides a user.  Should be in user@host
#     format.  If the host is not given, the one from ServicesUser is
#     used.

NSEnforcerUser	enforcer
#NSEnforcerUser	enforcer@localhost.net

# NSReleaseTimeout <time>  [REQUIRED]
#     Sets the delay before a NickServ-collided nick is released.

NSReleaseTimeout 1m

# NSAllowKillImmed  [OPTIONAL]
#     When enabled, allows the use of the IMMED option with the NickServ
#     SET KILL command.

#NSAllowKillImmed

# NSMaxLinkDepth <count>  [REQUIRED]
#     Sets the maximum depth to which a user may link nicks.  For example,
#     if this is set to 3, then a user may create links A <- B <- C <- D
#     (3 links), but may not then link D <- E (4 links from E to A).
#     Existing links are not affected by changes in this value, only the
#     ability to create new links.  To disable the creation of links
#     entirely, specify NSDisableLinkCommand (see below).
#
#     Note that the value of this option is limited by the LINK_HARDMAX
#     setting in config.h (default 42).  Zero may not be specified for
#     this option.
#     Also note that this does not limit the number of nicks which may be
#     linked to any single nick (for example, at a value of 3 it would
#     still be permissible to have A <- B, A <- C, A <- D, and A <- E all
#     at the same time).

NSMaxLinkDepth 3

# NSDisableLinkCommand  [OPTIONAL]
#     When enabled, makes the NickServ LINK command unavailable.  Note that
#     any links that have already been created will continue to function;
#     this only prevents new links from being made.

#NSDisableLinkCommand

# NSListOpersOnly  [OPTIONAL]
#     When enabled, limits use of the NickServ LIST command to IRC
#     operators.

#NSListOpersOnly

# NSListMax <count>  [REQUIRED]
#     Specifies the maximum number of nicks to be returned for a NickServ
#     LIST command.

NSListMax	50

# NSForceNickChange  [OPTIONAL]
#     When enabled, makes NickServ change a user's nick to a "Guest######" 
#     nick instead of killing them when enforcing a "nick kill".
#     This option is only available on DALnet ircd version 4.4.15 and
#     above (including Dreamforge), Bahamut, and Unreal.

#NSForceNickChange

# NSGuestNickPrefix <value>  [REQUIRED if NSForceNickChange specified]
#     When a user's nick is forcibly changed to enforce a "nick kill", their
#     new nick will start with this value. The rest will be made up of a
#     series of digits. This only applies when NSForceNickChange (see above)
#     is enabled.

NSGuestNickPrefix	"Guest"

# NSSecureAdmins  [RECOMMENDED]
#     When enabled, prevents the use of the DROP, GETPASS, and SET PASSWORD
#     commands by Services admins on other Services admins or the Services
#     root.

NSSecureAdmins

###########################################################################
#
# ChanServ configuration
#
###########################################################################

# CSMaxReg <count>  [RECOMMENDED]
#     Limits the number of channels which may be registered to a single
#     nickname.  In the case of linked nicks, this limit applies to the
#     entire set of linked nicks.

CSMaxReg	20

# CSExpire <time>  [RECOMMENDED]
#     Sets the number of days before a channel expires.  If not set,
#     channels will not expire.

CSExpire	14d

# CSSuspendExpire <time>  [RECOMMENDED]
#     Sets the default expiry time and recovery grace period for channel
#     suspensions.  If not set, channel suspensions will not expire by
#     default and there will be no recovery grace period.

CSSuspendExpire 12d 2d

# CSAccessMax <count>  [REQUIRED]
#     Sets the maximum number of entries on a channel's access list.
#     Channel access lists may contain only registered nicknames;
#     therefore, checking each entry on the list requires only a single
#     scalar comparison instead of a wildcard match, and this limit may be
#     safely set much higher than (for example) the nickname access list
#     size limit without impacting performance significantly.

CSAccessMax	1024

# CSAutokickMax <count>  [REQUIRED]
#     Sets the maximum number of entries on a channel's autokick list.

CSAutokickMax	32

# CSAutokickReason <text>  [REQUIRED]
#     Sets the default reason for an autokick if none is given.

CSAutokickReason "User has been banned from the channel"

# CSInhabit <time>  [REQUIRED]
#     Sets the length of time ChanServ stays in a channel after kicking a
#     user from a channel s/he is not permitted to be in.  This only occurs
#     when the user is the only one in the channel.

CSInhabit	15s

# CSRestrictDelay <time>  [DISCOURAGED]
#     When enabled, causes ChanServ to ignore any RESTRICTED or NOJOIN
#     channel setting for the given time after Services starts up.  This
#     gives users a time to identify to NickServ before being kicked out of
#     restricted channels they would normally be allowed to join.  This
#     setting will also cause channel mode +o's from servers to be passed
#     through for this initial period.
#
#     This option is presently discouraged because it is not properly
#     implemented; any users in channels when Services starts up get a
#     "free ride", though they can of course be deopped/kicked manually.

#CSRestrictDelay	30s

# CSListOpersOnly  [OPTIONAL]
#     When enabled, limits use of the ChanServ LIST command to IRC
#     operators.

#CSListOpersOnly

# CSListMax <count>  [REQUIRED]
#     Specifies the maximum number of channels to be returned for a
#     ChanServ LIST command.

CSListMax	50

###########################################################################
#
# MemoServ configuration
#
###########################################################################

# MSMaxMemos <count>  [RECOMMENDED]
#     Sets the maximum number of memos a user is allowed to keep by
#     default.  Normal users may set the limit anywhere between zero and
#     this value; Services admins can change it to any value or disable it.
#     If not given, the limit is disabled by default, and normal users can
#     set any limit they want.

MSMaxMemos	20

# MSSendDelay <time>  [RECOMMENDED]
#     Sets the delay between consecutive uses of the MemoServ SEND command.
#     This can help prevent spam as well as denial-of-service attacks from
#     sending large numbers of memos and filling up disk space (and
#     memory).  A 3-second wait means a maximum average of 150 bytes of
#     memo per second per user under the current IRC protocol.

MSSendDelay	3s

# MSNotifyAll  [OPTIONAL]
#     Should we notify all appropriate users of a new memo?  This applies
#     in cases where a memo is sent to a nick which either is linked to
#     another nick or has another nick linked to it.  Enabling this option
#     will cause MemoServ to check all users who are currently online to
#     see whether any have nicks which are linked to the target of the
#     memo, and if so, notify all of them.  This can take a good deal of
#     CPU time on larger networks, so you may want to disable it.

MSNotifyAll

###########################################################################
#
# OperServ configuration
#
###########################################################################

# ServicesRoot <nick>  [REQUIRED]
#    Specifies the Services "super-user".  The super-user, or "root" as in
#    Unix terminology, is the only user who can add or delete Services
#    admins.
#
#    This is commented out by default; make sure you insert the correct
#    nick before uncommenting it.

#ServicesRoot	Alcan

# LogMaxUsers  [OPTIONAL]
#    Causes Services to write a message to the log every time a new user
#    maximum is set.

LogMaxUsers

# StaticAkillReason <reason>  [OPTIONAL]
#    The reason to use when sending out KILLs for AKILLs and with the 
#    actual AKILL/GLINE commands. Some servers show this reason to users
#    if their connection is rejected because they match an AKILL. Leave
#    this undefined if you want to use the AKILL reason provided by the
#    operator who added it.

StaticAkillReason "You are banned from this network"

# ImmediatelySendAkill	[OPTIONAL]
#    Causes OperServ to inform all servers of a new AKILL the moment it
#    is added, rather than waiting for someone to match it first. 
   
#ImmediatelySendAkill

# AutokillExpiry <time>  [RECOMMENDED]
#     Sets the default expiry time for autokills.  If not defined,
#     autokills will not expire by default.

AutokillExpiry	30d

# KillClonesAkillExpire <time>  [REQUIRED]
#     Sets the expiry time for autokills added for hosts that have been
#     killed using the KILLCLONES command.

KillClonesAkillExpire	30m

# WallOper  [OPTIONAL]
#     Causes Services to send a WALLOPS/GLOBOPS when a user becomes an IRC
#     operator.  Note that this can cause WALLOPS floods when Services
#     first connects to the network.

#WallOper

# WallBadOS  [OPTIONAL]
#     Causes Services to send a WALLOPS/GLOBOPS if a non-IRC-operator tries
#     to use OperServ.

#WallBadOS

# WallOS...  [OPTIONAL]
#     Cause Services to send a WALLOPS/GLOBOPS on use of each of the
#     OperServ commands listed.  "WallOSChannel" applies to the MODE, KICK,
#     CLEARMODES, and CLEARCHAN commands.

#WallOSChannel
#WallOSAkill
#WallOSException

# WallSU  [OPTIONAL]
#     Causes Services to send a WALLOPS/GLOBOPS whenever a Services admin
#     successfully obtains Services super-user privileges with the SU
#     command.  Note that Services will always send a WALLOPS/GLOBOPS when
#     an incorrect password is given to the SU command or a user without
#     Services admin privileges attempts to use the SU command.

WallSU

# WallAkillExpire  [OPTIONAL]
#     Causes Services to send a WALLOPS/GLOBOPS whenever an autokill
#     expires.

#WallAkillExpire

# WallExceptionExpire  [OPTIONAL]
#     Causes Services to send a WALLOPS/GLOBOPS whenever an session limit
#     exception expires.

#WallExceptionExpire

# WallGetpass  [OPTIONAL]
#     Causes Services to send a WALLOPS/GLOBOPS on use of the NickServ or
#     ChanServ GETPASS command.

WallGetpass

# WallSetpass  [OPTIONAL]
#     Causes Services to send a WALLOPS/GLOBOPS whenever a Services admin
#     sets a password for a nickname or channel s/he does not normally have
#     privileges to set.

WallSetpass


# LimitSessions  [OPTIONAL]
#     Enables session limiting. Session limiting prevents users from 
#     connecting more than a certain number of times from the same host at the
#     same time - thus preventing most types of cloning. Once a host reaches 
#     it's session limit, all clients attempting to connect from that host 
#     will be killed. Exceptions to the default session limit, which are based 
#     on host names, can be defined via the exception list. It should be noted
#     that session limiting, along with a large exception list, can degrade
#     services' performance. See the source and comments in sessions.c and the
#     online help for more information about session limiting.
#
#     Session limiting is meant to replace the CheckClones and KillClones
#     code. It is therefore highly recommened that they are disabled when
#     session limiting has been enabled.
#
#     NOTE:  This option is not available when STREAMLINED is defined in
#     the Makefile.

LimitSessions

# DefSessionLimit <limit>  [RECOMMENDED]
#     Default session limit per host. Once a host reaches it's session limit,
#     all clients attempting to connect from that host will be killed. A value
#     of zero (or omitting the option entirely) means an unlimited session limit.

DefSessionLimit	3

# MaxSessionLimit <limit>  [OPTIONAL]
#     The maximum session limit that may be set for a host in an exception.

MaxSessionLimit 100

# ExceptionExpiry <time>  [RECOMMENDED]
#     Sets the default expiry time for exceptions.  If not set, exceptions will
#     not expire by default.

ExceptionExpiry	1d

# SessionLimitExceeded <message>  [OPTIONAL]
#     The message that will be NOTICE'd to a user just before they are removed
#     from the network because their's host session-limit has been exceeded. 
#     It may be used to give a slightly more descriptive reason for the
#     impending kill as opposed to simply "Session limit exceeded". If this is
#     commented out, nothing will be sent.

SessionLimitExceeded "The session limit for your host %s has been exceeded."

# SessionLimitDetailsLoc <message>  [OPTIONAL]
#     Same as above, but should be used to provide a website address where
#     users can find out more about session limits and how to go about 
#     applying for an exception. If this is commented out, nothing will be
#     sent.
#
#     This option has been intentionally commented out in an effort to remind
#     you to change the URL it contains. It is recommended that you supply an
#     address/url where people can get help regarding session limits.

#SessionLimitDetailsLoc "Please visit http://your.website.url/ for more information about session limits."

# SessionLimitAkill <max-kill-interval> <num-kills> <expiry>  [OPTIONAL]
# SessionLimitAkillReason <reason>  [REQUIRED if SessionLimitAkill specified]
#     With this option, Services will add an automatic autokill when the same
#     host's session limit is exceeded repeatedly in a short period of time.
#     If not given, autokills will not be automatically added (Services will
#     just keep killing users from the host as they come on).
#
#     <max-kill-interval> sets the maximum interval which can elapse between
#     kills before the kill counter is reset.
#
#     <num-kills> sets the number of kills before an autokill is added.
#
#     <expiry> sets the expiration time for the autokill.
#
#     <reason> sets the reason for the autokill.  Note that a separate
#     directive (SessionLimitAkillReason) is used for the reason.

#SessionLimitAkill 10s 5 30m
#SessionLimitAkillReason "Exceeding session limit"

# CheckClones <minusers> <maxdelay> <warningdelay>  [DEPRECATED]
#     Causes Services to try and detect "clones" connecting to the network.
#     A WALLOPS (or GOPER, if supported on the IRC server) will be sent if
#     Services thinks it has found clones.
#
#     This feature has been superseded by Session Limiting.
#
#     <minusers> sets the minimum number of users which must successively
#     connect to the network before Services will send a clone warning.
#
#     <maxdelay> sets the maximum time that can elapse between successive
#     users before Services decides they are not clones.
#
#     <warningdelay> sets the minimum time between clone warnings for
#     clones from the same host.
#
#     NOTE:  This option is not available when STREAMLINED is defined in
#     the Makefile.

#CheckClones	5 10s 30s

# KillClones  [DISCOURAGED]  [DEPRECATED]
#     Causes Services to kill users which trigger the clone warnings.  (If
#     CheckClones is disabled, this will have no effect.)
#
#     This feature has been superseded by Session Limiting.
#
#     BEWARE!  The clone checking code is easily fooled; it can be
#     triggered falsely under many conditions, for example:
#
#         - Multiple users connecting from a shell machine.
#
#         - A single user repeatedly connecting and disconnecting.
#
#     Be very sure you know what you're doing before you even think about
#     enabling this option, and remember that Services comes with no
#     warranty.
#
#     If that wasn't enough discouragement:
#
#     ***** DO NOT ENABLE THIS OPTION! *****
#
#     NOTE:  This option is not available when STREAMLINED is defined in
#     the Makefile.

#KillClones

###########################################################################
#
# StatServ configuration
#
# Note that StatServ support must be enabled in the configure script for it
# to function.
#
###########################################################################

# SSOpersOnly	[OPTIONAL]
#     Reserves the use of StatServ to IRC operators only.

#SSOpersOnly

###########################################################################
#
# Flamez configuration
#
# Note that those are new configurations options, read manual to get more
# info on them.
#
###########################################################################
FloodServName "FloodServ"	"Flood?  what it's?"

# FloodServAkillExpiry [REQUIRED if u use FloodServ]
#	Time used when akilling a guy for flooding.
FloodServAkillExpiry 30d

# FloodServAkillExpiry [REQUIRED if u use FloodServ]
#	MSG when he got akilled for flooding.
FloodServAkillReason "(FloodServ) You have triggered a network protection Text/Flood, please contact akill@insiderz.net if you think its an error."

# FloodServTFNumLines & FloodServTFSec [REQUIRED if u use FloodServ]
#	Numbers of line by second does some users repeat themselft with the SAME
#	text/ctcp for that it's considerated flood.
FloodServTFNumLines 5
FloodServTFSec 5

# FloodServTFNLWarned & FloodServTFSecWarned [OPTINAL]
#	Numbers of line by second does some users repeat themselft with the SAME
#	text/ctcp after they got warned does it's considarated flood.
#	ie. If we use warnfirst!, 
#		-If a user X told "come to my network ...."  5 times in 5 seconds(if the fs setting is 5:5), 
#       he will got killed.
#		When he loggon back, 5 seconds later ( 4 seconds (flood time) + 5 second for logging = 9 sec.)
#		He decide to continue is flood,  and return to channel #Y, well if FloodServTFNLWarned is set to 7,
#		then after 2 other msg flood, he will got akilled if all that attempt take less than the
#		time in FloodServTFSecWarned.
#		-Second example, If 2 users flood with the same text, then *One* will got killed, and the other
#		after others lines of flood will got akilled.
FloodServTFNLWarned 7
FloodServTFSecWarned 20

# Put a comment before next line if you dont want to warn before any akill.
FloodServWarnFirst

FloodServWarnMsg "(FloodServ) Warning, you have triggered a network protection Text/Flood, stop that flooding."

# MISC configuration
GrNameAkillReason "RealName Banned from the Network"

# NEW db configuration
NooperDB	nooper.db
SNooperDB	snooper.db
AConnectDB	aconnect.db
NakillDB	nakill.db
FloodServDB flood.db
GrNameDB grname.db

# NEW Wall OP 
WallOSSNooper
WallOSNooper
WallOSNakill
WallOSAConnect


